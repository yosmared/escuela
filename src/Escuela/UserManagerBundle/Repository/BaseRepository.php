<?php

namespace Escuela\UserManagerBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Knp\Bundle\PaginatorBundle\Definition\PaginatorAware;
/**
 * TreatmentsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseRepository extends EntityRepository
{
	/**
	 *
	 * @param string $field        	
	 * @param string $value        	
	 * @return boolean
	 */
	public function existsValueUnique($field, $value) {
		$q = $this->createQueryBuilder ( 'u' )->where ( 'u.' . $field . '=:' . $field )->setParameter ( $field, $value )->getQuery ();
		try {
			if (sizeof ( $q->getSingleResult () ) > 0)
				return true;
		} catch ( NoResultException $e ) {
			return false;
		}
	}

	/**
	 * @return array
	 */
	public function findAllActive($fieldToOrder = null) {
		if($fieldToOrder == null) {
			$fieldToOrder = "name";
		}
		$orderBy = array($fieldToOrder => 'ASC');
		$criteria = array('isDeleted' => false);
		$result = $this->findBy($criteria, $orderBy);
		
		return $result;
	}
	/**
	* @return array
	*/
	public function findAllActiveByQueryBuilder($fieldToOrder = null) {
		if($fieldToOrder == null) {
			$fieldToOrder = "p.name";
		}

		$q = $this->createQueryBuilder('p')->where('p.isDeleted=false')->orderBy($fieldToOrder)->getQuery();
	
		return $q;

	}

	/**
	 * @return array
	 */
	public function findByCriteriaByQueryBuilder($criteriaArray, $fieldToOrder = null) {
		$qb = $this->createQueryBuilder('e');
		$or = $qb->expr()->orx();
		foreach ($criteriaArray as $key => $value) {
			$or->add($qb->expr()->like("LOWER(e.{$key})", ":{$key}" ));
			$qb->setParameter($key, "%{$value}%");
		}

		$and = $qb->expr()->eq('e.isDeleted', 'false');
	
		$qb->where($qb->expr()->andX($or, $and));

		$q = $qb->getQuery();
		return $q;
	}
	
}
